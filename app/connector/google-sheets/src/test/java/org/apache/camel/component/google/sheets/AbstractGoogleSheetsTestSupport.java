/*
 * Copyright (C) 2016 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.component.google.sheets;

import com.google.api.services.sheets.v4.model.*;
import org.apache.camel.CamelContext;
import org.apache.camel.CamelExecutionException;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.apache.camel.util.IntrospectionSupport;

import java.io.IOException;
import java.util.*;

/**
 * Abstract base class for GoogleSheets Integration tests generated by Camel
 * API component maven plugin.
 */
public class AbstractGoogleSheetsTestSupport extends CamelTestSupport {

    protected static final String TEST_SHEET = "TestData";
    private static final String TEST_OPTIONS_PROPERTIES = "/test-options.properties";

    private Spreadsheet spreadsheet;

    /**
     * Create test spreadsheet that is used throughout all tests.
     */
    private void createTestSpreadsheet() {
        Spreadsheet spreadsheet = new Spreadsheet();
        SpreadsheetProperties spreadsheetProperties = new SpreadsheetProperties();
        spreadsheetProperties.setTitle("camel-sheets-" + Math.abs(new Random().nextInt()));

        spreadsheet.setProperties(spreadsheetProperties);

        Sheet sheet = new Sheet();
        SheetProperties sheetProperties = new SheetProperties();
        sheetProperties.setTitle(TEST_SHEET);
        sheet.setProperties(sheetProperties);

        GridData grid = new GridData();
        grid.setStartRow(1);
        grid.setStartColumn(1);
        grid.setRowData(Arrays.asList(
                new RowData().setValues(Arrays.asList(
                        new CellData().setEffectiveValue(new ExtendedValue().setStringValue("a1")),
                        new CellData().setEffectiveValue(new ExtendedValue().setStringValue("b1")))),
                new RowData().setValues(Arrays.asList(
                        new CellData().setEffectiveValue(new ExtendedValue().setStringValue("a2")),
                        new CellData().setEffectiveValue(new ExtendedValue().setStringValue("b2"))))));

        sheet.setData(Collections.singletonList(grid));

        spreadsheet.setSheets(Collections.singletonList(sheet));
        
        this.spreadsheet = (Spreadsheet) requestBody("google-sheets://spreadsheets/create?inBody=content", spreadsheet);
    }

    @Override
    protected CamelContext createCamelContext() throws Exception {

        final CamelContext context = super.createCamelContext();

        // read GoogleSheets component configuration from
        // TEST_OPTIONS_PROPERTIES
        final Properties properties = new Properties();
        try {
            properties.load(getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES));
        } catch (Exception e) {
            throw new IOException(String.format("%s could not be loaded: %s", TEST_OPTIONS_PROPERTIES, e.getMessage()), e);
        }

        Map<String, Object> options = new HashMap<>();
        for (Map.Entry<Object, Object> entry : properties.entrySet()) {
            options.put(entry.getKey().toString(), entry.getValue());
        }

        final GoogleSheetsConfiguration configuration = new GoogleSheetsConfiguration();
        IntrospectionSupport.setProperties(configuration, options);

        // add GoogleSheetsComponent to Camel context
        final GoogleSheetsComponent component = new GoogleSheetsComponent(context);
        component.setConfiguration(configuration);
        context.addComponent("google-sheets", component);

        return context;
    }

    @Override
    public boolean isCreateCamelContextPerClass() {
        // only create the context once for this class
        return true;
    }

    @SuppressWarnings("unchecked")
    protected Object requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers) throws CamelExecutionException {
        return template().requestBodyAndHeaders(endpointUri, body, headers);
    }

    @SuppressWarnings("unchecked")
    protected Object requestBody(String endpoint, Object body) throws CamelExecutionException {
        return template().requestBody(endpoint, body);
    }

    public Spreadsheet getSpreadsheet() {
        if (spreadsheet == null) {
            createTestSpreadsheet();
        }
        return spreadsheet;
    }

    public void setSpreadsheet(Spreadsheet sheet) {
        this.spreadsheet = sheet;
    }
}
