- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-rest
    labels:
      app: syndesis
      component: syndesis-rest
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-integration
    labels:
      app: syndesis
      component: syndesis-rest
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: syndesis
      component: syndesis-rest
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: syndesis-rest-tls
    name: syndesis-rest
  spec:
    ports:
    - port: 443
      protocol: TCP
      targetPort: 8443
    selector:
      app: syndesis
      component: syndesis-rest
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: syndesis
      component: syndesis-rest
    name: syndesis-rest
  spec:
    host: ${ROUTE_HOSTNAME}
    path: /api
    port:
      targetPort: 8443
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: syndesis-rest
      weight: 100
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: syndesis
      component: syndesis-rest
    name: syndesis-rest-mapper
  spec:
    host: ${ROUTE_HOSTNAME}
    path: /mapper
    port:
      targetPort: 8443
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: syndesis-rest
      weight: 100
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: syndesis
      component: syndesis-rest
    name: syndesis-rest
  spec:
    replicas: 1
    selector:
      app: syndesis
      component: syndesis-rest
      deploymentconfig: syndesis-rest
    strategy:
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
      type: Recreate
    template:
      metadata:
        labels:
          app: syndesis
          component: syndesis-rest
          deploymentconfig: syndesis-rest
        annotations:
          pod.beta.kubernetes.io/init-containers: |-
            [{
              "name": "openshift-ca-pemtokeystore",
              "image": "{{^WithInitContainerDockerImages}}' '{{/WithInitContainerDockerImages}}{{#WithInitContainerDockerImages}}${SYNDESIS_REGISTRY}/{{ Images.SyndesisImagesPrefix }}/{{ Images.Support.PemToKeystore }}:{{ Tags.PemToKeystore }}{{/WithInitContainerDockerImages}}",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "-keystore", "/tls-keystore/openshift-truststore.jks",
                "-ca-file", "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                "-ca-file", "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt",
                "-ca-dir", "/usr/share/ca-certificates/mozilla"
              ],
              "volumeMounts": [{
                "name": "syndesis-rest-service-ca",
                "mountPath": "/tls-keystore"
              }],
              "resources": {
                "limits": {
                  "memory": "255Mi"
                },
                "requests": {
                  "memory": "20Mi"
                }
              }
            }]
      spec:
        initContainers:
        - name: openshift-ca-pemtokeystore
          image: {{^WithInitContainerDockerImages}}' '{{/WithInitContainerDockerImages}}{{#WithInitContainerDockerImages}}${SYNDESIS_REGISTRY}/{{ Images.SyndesisImagesPrefix }}/{{ Images.Support.PemToKeystore }}:{{ Tags.PemToKeystore }}{{/WithInitContainerDockerImages}}
          imagePullPolicy: IfNotPresent
          args:
          - -keystore
          - /tls-keystore/openshift-truststore.jks
          - -ca-file
          - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - -ca-file
          - /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          - -ca-dir
          - /usr/share/ca-certificates/mozilla
          volumeMounts:
          - name: syndesis-rest-service-ca
            mountPath: /tls-keystore
          resources:
            limits:
              memory: 255Mi
            requests:
              memory: 20Mi
        serviceAccountName: syndesis-rest
        containers:
        - name: syndesis-rest
          env:
          - name: AB_JOLOKIA_OFF
            value: "true"
          - name: JAVA_APP_DIR
            value: /deployments
          - name: AB_OFF
            value: "true"
          - name: JAVA_OPTIONS
            value: "-Djava.net.preferIPv4Stack=true -Djavax.net.ssl.trustStore=/tls-keystore/openshift-truststore.jks -Duser.home=/tmp"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ENDPOINTS_TEST_SUPPORT_ENABLED
            value: ${TEST_SUPPORT_ENABLED}
          - name: CONTROLLERS_INTEGRATION_ENABLED
            value: ${CONTROLLERS_INTEGRATION_ENABLED}
          - name: POSTGRESQL_SAMPLEDB_PASSWORD
            value: ${POSTGRESQL_SAMPLEDB_PASSWORD}
{{^WithDockerImages}}
          image: ' '
{{/WithDockerImages}}{{#WithDockerImages}}
          image: ${SYNDESIS_REGISTRY}/{{Images.SyndesisImagesPrefix}}/{{ Images.Syndesis.Rest }}:{{ Tags.Syndesis }}
{{/WithDockerImages}}
          imagePullPolicy: IfNotPresent
{{^Probeless}}
          livenessProbe:
            exec:
              command:
              - curl
              - -sSLf
              - http://localhost:8080
            initialDelaySeconds: 180
          readinessProbe:
            exec:
              command:
              - curl
              - -sSLf
              - http://localhost:8181/health
            initialDelaySeconds: 10{{/Probeless}}
          ports:
          - containerPort: 8080
            name: http
          - containerPort: 9779
            name: prometheus
          - containerPort: 8778
            name: jolokia
          workingDir: /deployments
          volumeMounts:
          - name: syndesis-rest-service-ca
            mountPath: /tls-keystore
          - name: config-volume
            mountPath: /deployments/config
          # Set QoS class to "Guaranteed" (limits == requests)
          # This doesn't work on OSO as there is a fixed ratio
          # from limit to resource (80% currently). 'requests' is ignored there
          resources:
            limits:
              memory: 612Mi
            requests:
              memory: 256Mi

        - name: syndesis-oauthproxy
{{^WithDockerImages}}
          image: ' '{{/WithDockerImages}}{{#WithDockerImages}}
          image: ${SYNDESIS_REGISTRY}/{{Images.OAuthProxyImagePrefix}}/{{ Images.Support.OAuthProxy }}:{{ Tags.OAuthProxy }}{{/WithDockerImages}}
          args:
            - --http-address=:8443
            - --https-address=:8444
            - --provider=openshift
            - --client-id={{#Restricted}}system:serviceaccount:${OPENSHIFT_PROJECT}:syndesis-oauth-client{{/Restricted}}{{^Restricted}}${OPENSHIFT_OAUTH_CLIENT_ID}{{/Restricted}}
            - --client-secret=${OPENSHIFT_OAUTH_CLIENT_SECRET}
            - --upstream=http://127.0.0.1:8080
            - --tls-cert=/etc/tls/private/tls.crt
            - --tls-key=/etc/tls/private/tls.key
            - --cookie-secret=$(OAUTH_COOKIE_SECRET)
            - --pass-access-token
            - --skip-provider-button
            - --skip-auth-regex=/api/v1/swagger.*
            - --skip-auth-regex=/api/v1/index.html
            - --skip-auth-regex=/api/v1/credentials/callback
            - --skip-auth-preflight
            {{#Restricted}}- --openshift-sar={"namespace":"${OPENSHIFT_PROJECT}","resource":"pods","verb":"get"}{{/Restricted}}
          env:
          - name: OAUTH_COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                name: syndesis-oauth-proxy-cookie-secret
                key: oauthCookieSecret
          ports:
          - containerPort: 8443
            name: public
            protocol: TCP
{{^Probeless}}
          readinessProbe:
            tcpSocket:
              port: 8443
          livenessProbe:
            tcpSocket:
              port: 8443{{/Probeless}}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: syndesis-rest-tls
        volumes:
        - name: syndesis-rest-service-ca
          emptyDir: {}
        - name: config-volume
          configMap:
            name: syndesis-rest-config
        - name: syndesis-rest-tls
          secret:
            secretName: syndesis-rest-tls
    triggers:
{{^WithDockerImages}}
    - imageChangeParams:
        automatic: true
        containerNames:
        - syndesis-rest
        from:
          kind: ImageStreamTag
          name: {{ Images.Syndesis.Rest }}:{{ Tags.Syndesis }}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - syndesis-oauthproxy
        from:
          kind: ImageStreamTag
          name: {{ Images.Support.OAuthProxy }}:{{ Tags.OAuthProxy }}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
{{/WithDockerImages}}
{{^WithInitContainerDockerImages}}
    - imageChangeParams:
        automatic: true
        containerNames:
        - openshift-ca-pemtokeystore
        from:
          kind: ImageStreamTag
          name: {{ Images.Support.PemToKeystore }}:{{ Tags.PemToKeystore }}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
{{/WithInitContainerDockerImages}}
    - type: ConfigChange

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      component: syndesis-rest
    name: syndesis-rest-config
  data:
    application.yml: |-
      server.address: 127.0.0.1
      deployment:
        load-demo-data: ${DEMO_DATA_ENABLED}
      cors:
{{^AllowLocalHost}}
        allowedOrigins: https://${ROUTE_HOSTNAME}
{{/AllowLocalHost}}{{#AllowLocalHost}}
        allowedOrigins: http://localhost:4200, https://localhost:4200, https://${ROUTE_HOSTNAME}
{{/AllowLocalHost}}
      cache:
        cluster:
          name: SyndesisCluster
        max:
          entries: 100
      spring:
        zipkin:
          enabled: false
        datasource:
          url: jdbc:postgresql://syndesis-db:5432/syndesis?sslmode=disable
          username: ${POSTGRESQL_USER}
          password: ${POSTGRESQL_PASSWORD}
          driver-class-name: org.postgresql.Driver
      security:
        basic:
          enabled: false
      management:
        address: 127.0.0.1
        port: 8181
        security:
          enabled: true
      endpoints:
        health:
          sensitive: false
        jsondb:
          enabled: true
      openshift:
        apiBaseUrl: ${OPENSHIFT_MASTER}/oapi/v1
        namespace: ${NAMESPACE}
        imageStreamNamespace: ${IMAGE_STREAM_NAMESPACE}
        builderImageStreamTag: {{ Images.S2i.ImageStream }}:{{ Images.S2i.Tag }}
      dao:
        kind: jsondb
