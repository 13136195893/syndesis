package io.syndesis.connector.http.springboot;

import java.util.HashMap;
import java.util.Map;
import io.syndesis.connector.http.HttpGetComponent;
import org.apache.camel.CamelContext;
import org.apache.camel.util.IntrospectionSupport;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;

/**
 * Generated by camel-connector-maven-plugin - do not edit this file!
 */
@Configuration
@ConditionalOnBean(type = "org.apache.camel.spring.boot.CamelAutoConfiguration")
@AutoConfigureAfter(name = "org.apache.camel.spring.boot.CamelAutoConfiguration")
@EnableConfigurationProperties(HttpGetConnectorConfiguration.class)
public class HttpGetConnectorAutoConfiguration {

    @Lazy
    @Bean(name = "http-get-component")
    @ConditionalOnClass(CamelContext.class)
    @ConditionalOnMissingBean(io.syndesis.connector.http.HttpGetComponent.class)
    public HttpGetComponent configureHttpGetComponent(
            CamelContext camelContext,
            HttpGetConnectorConfiguration configuration) throws Exception {
        HttpGetComponent connector = new HttpGetComponent();
        connector.setCamelContext(camelContext);
        Map<String, Object> parameters = new HashMap<>();
        IntrospectionSupport.getProperties(configuration, parameters, null,
                false);
        IntrospectionSupport.setProperties(camelContext,
                camelContext.getTypeConverter(), connector, parameters);
        connector.setComponentOptions(parameters);
        return connector;
    }
}