package com.redhat.ipaas.connector.salesforce.springboot;

import java.util.Map;
import java.util.Set;
import org.apache.camel.component.salesforce.SalesforceEndpointConfig;
import org.apache.camel.component.salesforce.SalesforceLoginConfig;
import org.apache.camel.util.jsse.SSLContextParameters;
import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * The salesforce connector is used for integrating Camel with the massive
 * Salesforce API.
 * 
 * Generated by camel-connector-maven-plugin - do not edit this file!
 */
@ConfigurationProperties(prefix = "camel.connector.salesforce-upsert-contact")
public class SalesforceUpsertContactConnectorConfiguration {

    /**
     * To use the shared SalesforceLoginConfig as login configuration
     */
    private SalesforceLoginConfig loginConfig;
    /**
     * Salesforce login URL defaults to https://login.salesforce.com
     */
    private String loginUrl = "https://login.salesforce.com";
    /**
     * Salesforce connected application Consumer Key
     */
    private String clientId;
    /**
     * Salesforce connected application Consumer Secret
     */
    private String clientSecret;
    /**
     * Salesforce connected application Consumer token
     */
    private String refreshToken;
    /**
     * Salesforce account user name
     */
    private String userName;
    /**
     * Salesforce account password
     */
    private String password;
    /**
     * Flag to enable/disable lazy OAuth default is false. When enabled OAuth
     * token retrieval or generation is not done until the first API call
     */
    private boolean lazyLogin = false;
    /**
     * To use the shared SalesforceEndpointConfig as endpoint configuration
     */
    private SalesforceEndpointConfig config;
    /**
     * Used for configuring HTTP client properties as key/value pairs
     */
    private Map<String, Object> httpClientProperties;
    /**
     * To configure security using SSLContextParameters
     */
    private SSLContextParameters sslContextParameters;
    /**
     * To configure HTTP proxy host
     */
    private String httpProxyHost;
    /**
     * To configure HTTP proxy port
     */
    private Integer httpProxyPort;
    /**
     * To configure HTTP proxy username
     */
    private String httpProxyUsername;
    /**
     * To configure HTTP proxy password
     */
    private String httpProxyPassword;
    /**
     * Enable for Socks4 proxy false by default
     */
    private boolean isHttpProxySocks4 = false;
    /**
     * Enable for TLS connections true by default
     */
    private boolean isHttpProxySecure = false;
    /**
     * HTTP proxy included addresses
     */
    private Set<String> httpProxyIncludedAddresses;
    /**
     * HTTP proxy excluded addresses
     */
    private Set<String> httpProxyExcludedAddresses;
    /**
     * HTTP proxy authentication URI
     */
    private String httpProxyAuthUri;
    /**
     * HTTP proxy authentication realm
     */
    private String httpProxyRealm;
    /**
     * Use HTTP proxy Digest authentication false by default
     */
    private boolean httpProxyUseDigestAuth = false;
    /**
     * Package names to scan for DTO classes (multiple packages can be separated
     * by comma).
     */
    private String[] packages;
    /**
     * Whether the component should resolve property placeholders on itself when
     * starting. Only properties which are of String type can use property
     * placeholders.
     */
    private boolean resolvePropertyPlaceholders = true;

    public SalesforceLoginConfig getLoginConfig() {
        return loginConfig;
    }

    public void setLoginConfig(SalesforceLoginConfig loginConfig) {
        this.loginConfig = loginConfig;
    }

    public String getLoginUrl() {
        return loginUrl;
    }

    public void setLoginUrl(String loginUrl) {
        this.loginUrl = loginUrl;
    }

    public String getClientId() {
        return clientId;
    }

    public void setClientId(String clientId) {
        this.clientId = clientId;
    }

    public String getClientSecret() {
        return clientSecret;
    }

    public void setClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
    }

    public String getRefreshToken() {
        return refreshToken;
    }

    public void setRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public boolean isLazyLogin() {
        return lazyLogin;
    }

    public void setLazyLogin(boolean lazyLogin) {
        this.lazyLogin = lazyLogin;
    }

    public SalesforceEndpointConfig getConfig() {
        return config;
    }

    public void setConfig(SalesforceEndpointConfig config) {
        this.config = config;
    }

    public Map<String, Object> getHttpClientProperties() {
        return httpClientProperties;
    }

    public void setHttpClientProperties(Map<String, Object> httpClientProperties) {
        this.httpClientProperties = httpClientProperties;
    }

    public SSLContextParameters getSslContextParameters() {
        return sslContextParameters;
    }

    public void setSslContextParameters(
            SSLContextParameters sslContextParameters) {
        this.sslContextParameters = sslContextParameters;
    }

    public String getHttpProxyHost() {
        return httpProxyHost;
    }

    public void setHttpProxyHost(String httpProxyHost) {
        this.httpProxyHost = httpProxyHost;
    }

    public Integer getHttpProxyPort() {
        return httpProxyPort;
    }

    public void setHttpProxyPort(Integer httpProxyPort) {
        this.httpProxyPort = httpProxyPort;
    }

    public String getHttpProxyUsername() {
        return httpProxyUsername;
    }

    public void setHttpProxyUsername(String httpProxyUsername) {
        this.httpProxyUsername = httpProxyUsername;
    }

    public String getHttpProxyPassword() {
        return httpProxyPassword;
    }

    public void setHttpProxyPassword(String httpProxyPassword) {
        this.httpProxyPassword = httpProxyPassword;
    }

    public boolean isIsHttpProxySocks4() {
        return isHttpProxySocks4;
    }

    public void setIsHttpProxySocks4(boolean isHttpProxySocks4) {
        this.isHttpProxySocks4 = isHttpProxySocks4;
    }

    public boolean isIsHttpProxySecure() {
        return isHttpProxySecure;
    }

    public void setIsHttpProxySecure(boolean isHttpProxySecure) {
        this.isHttpProxySecure = isHttpProxySecure;
    }

    public Set<String> getHttpProxyIncludedAddresses() {
        return httpProxyIncludedAddresses;
    }

    public void setHttpProxyIncludedAddresses(
            Set<String> httpProxyIncludedAddresses) {
        this.httpProxyIncludedAddresses = httpProxyIncludedAddresses;
    }

    public Set<String> getHttpProxyExcludedAddresses() {
        return httpProxyExcludedAddresses;
    }

    public void setHttpProxyExcludedAddresses(
            Set<String> httpProxyExcludedAddresses) {
        this.httpProxyExcludedAddresses = httpProxyExcludedAddresses;
    }

    public String getHttpProxyAuthUri() {
        return httpProxyAuthUri;
    }

    public void setHttpProxyAuthUri(String httpProxyAuthUri) {
        this.httpProxyAuthUri = httpProxyAuthUri;
    }

    public String getHttpProxyRealm() {
        return httpProxyRealm;
    }

    public void setHttpProxyRealm(String httpProxyRealm) {
        this.httpProxyRealm = httpProxyRealm;
    }

    public boolean isHttpProxyUseDigestAuth() {
        return httpProxyUseDigestAuth;
    }

    public void setHttpProxyUseDigestAuth(boolean httpProxyUseDigestAuth) {
        this.httpProxyUseDigestAuth = httpProxyUseDigestAuth;
    }

    public String[] getPackages() {
        return packages;
    }

    public void setPackages(String[] packages) {
        this.packages = packages;
    }

    public boolean isResolvePropertyPlaceholders() {
        return resolvePropertyPlaceholders;
    }

    public void setResolvePropertyPlaceholders(
            boolean resolvePropertyPlaceholders) {
        this.resolvePropertyPlaceholders = resolvePropertyPlaceholders;
    }
}