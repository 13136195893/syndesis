---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: k8amq
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: k8amq
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: k8amq
        spec:
          containers:
          - image: funktion/connector-k8amq:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: k8amq
      syntax: k8amq:destinationType:destinationName
      title: JMS
      description: Funktion - ActiveMQ component finessed to work well with Kubernetes
      label: messaging
      deprecated: false
      async: true
      javaType: io.fabric8.funktion.camel.components.k8amq.K8ActiveMQComponent
      groupId: io.fabric8.funktion.camel-k8
      artifactId: k8amq
      version: 1.0-SNAPSHOT
    componentProperties:
      configuration:
        kind: property
        type: object
        javaType: org.apache.camel.component.jms.JmsConfiguration
        deprecated: false
        secret: false
        order: 0
      brokerURL:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        order: 1
      userName:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        order: 2
      password:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        order: 3
      trustAllPackages:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 4
      exposeAllQueues:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 5
      usePooledConnection:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 6
      useSingleConnection:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 7
      acceptMessagesWhileStopping:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 8
      allowReplyManagerQuickStop:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 9
      acknowledgementMode:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 10
      eagerLoadingOfProperties:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 11
      acknowledgementModeName:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        order: 12
      autoStartup:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 13
      cacheLevel:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 14
      cacheLevelName:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        order: 15
      replyToCacheLevelName:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        order: 16
      clientId:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        order: 17
      concurrentConsumers:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 18
      replyToConcurrentConsumers:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 19
      connectionFactory:
        kind: property
        type: object
        javaType: javax.jms.ConnectionFactory
        deprecated: false
        secret: false
        order: 20
      username:
        kind: property
        required: false
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: true
        order: 21
      deliveryPersistent:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 22
      deliveryMode:
        kind: property
        type: integer
        javaType: java.lang.Integer
        deprecated: false
        secret: false
        order: 23
      durableSubscriptionName:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        order: 24
      exceptionListener:
        kind: property
        type: object
        javaType: javax.jms.ExceptionListener
        deprecated: false
        secret: false
        order: 25
      errorHandler:
        kind: property
        type: object
        javaType: org.springframework.util.ErrorHandler
        deprecated: false
        secret: false
        order: 26
      errorHandlerLoggingLevel:
        kind: property
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        deprecated: false
        secret: false
        order: 27
      errorHandlerLogStackTrace:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 28
      explicitQosEnabled:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 29
      exposeListenerSession:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 30
      idleTaskExecutionLimit:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 31
      idleConsumerLimit:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 32
      maxConcurrentConsumers:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 33
      replyToMaxConcurrentConsumers:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 34
      replyOnTimeoutToMaxConcurrentConsumers:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 35
      maxMessagesPerTask:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 36
      messageConverter:
        kind: property
        type: object
        javaType: org.springframework.jms.support.converter.MessageConverter
        deprecated: false
        secret: false
        order: 37
      mapJmsMessage:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 38
      messageIdEnabled:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 39
      messageTimestampEnabled:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 40
      alwaysCopyMessage:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 41
      useMessageIDAsCorrelationID:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 42
      priority:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 43
      pubSubNoLocal:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 44
      receiveTimeout:
        kind: property
        type: integer
        javaType: long
        deprecated: false
        secret: false
        order: 45
      recoveryInterval:
        kind: property
        type: integer
        javaType: long
        deprecated: false
        secret: false
        order: 46
      subscriptionDurable:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: true
        secret: false
        order: 47
      taskExecutor:
        kind: property
        type: object
        javaType: org.springframework.core.task.TaskExecutor
        deprecated: false
        secret: false
        order: 48
      timeToLive:
        kind: property
        type: integer
        javaType: long
        deprecated: false
        secret: false
        order: 49
      transacted:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 50
      lazyCreateTransactionManager:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 51
      transactionManager:
        kind: property
        type: object
        javaType: org.springframework.transaction.PlatformTransactionManager
        deprecated: false
        secret: false
        order: 52
      transactionName:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        order: 53
      transactionTimeout:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 54
      testConnectionOnStartup:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 55
      asyncStartListener:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 56
      asyncStopListener:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 57
      forceSendOriginalMessage:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 58
      requestTimeout:
        kind: property
        type: integer
        javaType: long
        deprecated: false
        secret: false
        order: 59
      requestTimeoutCheckerInterval:
        kind: property
        type: integer
        javaType: long
        deprecated: false
        secret: false
        order: 60
      transferExchange:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 61
      transferException:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 62
      transferFault:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 63
      jmsOperations:
        kind: property
        type: object
        javaType: org.springframework.jms.core.JmsOperations
        deprecated: false
        secret: false
        order: 64
      destinationResolver:
        kind: property
        type: object
        javaType: org.springframework.jms.support.destination.DestinationResolver
        deprecated: false
        secret: false
        order: 65
      replyToType:
        kind: property
        type: string
        javaType: org.apache.camel.component.jms.ReplyToType
        enum:
        - Temporary
        - Shared
        - Exclusive
        deprecated: false
        secret: false
        order: 66
      preserveMessageQos:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 67
      asyncConsumer:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 68
      allowNullBody:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 69
      includeSentJMSMessageID:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 70
      includeAllJMSXProperties:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        order: 71
      defaultTaskExecutorType:
        kind: property
        type: string
        javaType: org.apache.camel.component.jms.DefaultTaskExecutorType
        enum:
        - ThreadPool
        - SimpleAsync
        deprecated: false
        secret: false
        order: 72
      jmsKeyFormatStrategy:
        kind: property
        type: object
        javaType: org.apache.camel.component.jms.JmsKeyFormatStrategy
        deprecated: false
        secret: false
        order: 73
      applicationContext:
        kind: property
        type: object
        javaType: org.springframework.context.ApplicationContext
        deprecated: false
        secret: false
        order: 74
      queueBrowseStrategy:
        kind: property
        type: object
        javaType: org.apache.camel.component.jms.QueueBrowseStrategy
        deprecated: false
        secret: false
        order: 75
      headerFilterStrategy:
        kind: property
        type: object
        javaType: org.apache.camel.spi.HeaderFilterStrategy
        deprecated: false
        secret: false
        description: To use a custom HeaderFilterStrategy to filter header to and from Camel message.
        order: 76
      messageCreatedStrategy:
        kind: property
        type: object
        javaType: org.apache.camel.component.jms.MessageCreatedStrategy
        deprecated: false
        secret: false
        order: 77
      waitForProvisionCorrelationToBeUpdatedCounter:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        order: 78
      waitForProvisionCorrelationToBeUpdatedThreadSleepingTime:
        kind: property
        type: integer
        javaType: long
        deprecated: false
        secret: false
        order: 79
    properties:
      destinationType:
        kind: path
        group: common
        type: string
        javaType: java.lang.String
        enum:
        - queue
        - topic
        - temp:queue
        - temp:topic
        deprecated: false
        secret: false
        defaultValue: queue
        description: The kind of destination to use
        order: 0
      destinationName:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Name of the queue or topic to use as destination
        order: 1
      clientId:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the JMS client ID to use. Note that this value if specified must be unique and can only be used by a single JMS connection instance. It is typically only required for durable topic subscriptions. If using Apache ActiveMQ you may prefer to use Virtual Topics instead.
        order: 2
      connectionFactory:
        kind: parameter
        group: common
        type: object
        javaType: javax.jms.ConnectionFactory
        deprecated: false
        secret: false
        description: The connection factory to be use. A connection factory must be configured either on the component or endpoint.
        order: 3
      disableReplyTo:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If true a producer will behave like a InOnly exchange with the exception that JMSReplyTo header is sent out and not be suppressed like in the case of InOnly. Like InOnly the producer will not wait for a reply. A consumer with this flag will behave like InOnly. This feature can be used to bridge InOut requests to another queue so that a route on the other queue will send its response directly back to the original JMSReplyTo.
        order: 4
      durableSubscriptionName:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well.
        order: 5
      jmsMessageType:
        kind: parameter
        group: common
        type: string
        javaType: org.apache.camel.component.jms.JmsMessageType
        enum:
        - Bytes
        - Map
        - Object
        - Stream
        - Text
        deprecated: false
        secret: false
        description: 'Allows you to force the use of a specific javax.jms.Message implementation
          for sending JMS messages. Possible values are: Bytes Map Object Stream Text.
          By default Camel would determine which JMS message type to use from the In body
          type. This option allows you to specify it.'
        order: 6
      testConnectionOnStartup:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensures that Camel is not started with failed connections. The JMS producers is tested as well.
        order: 7
      acknowledgementModeName:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        enum:
        - SESSION_TRANSACTED
        - CLIENT_ACKNOWLEDGE
        - AUTO_ACKNOWLEDGE
        - DUPS_OK_ACKNOWLEDGE
        deprecated: false
        secret: false
        defaultValue: AUTO_ACKNOWLEDGE
        description: 'The JMS acknowledgement name which is one of: SESSION_TRANSACTED
          CLIENT_ACKNOWLEDGE AUTO_ACKNOWLEDGE DUPS_OK_ACKNOWLEDGE'
        order: 8
      asyncConsumer:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether the JmsConsumer processes the Exchange asynchronously. If enabled then the JmsConsumer may pickup the next message from the JMS queue while the previous message is being processed asynchronously (by the Asynchronous Routing Engine). This means that messages may be processed not 100 strictly in order. If disabled (as default) then the Exchange is fully processed before the JmsConsumer will pickup the next message from the JMS queue. Note if transacted has been enabled then asyncConsumer=true does not run asynchronously as transaction must be executed synchronously (Camel 3.0 may support async transactions).
        order: 9
      autoStartup:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Specifies whether the consumer container should auto-startup.
        order: 10
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 11
      cacheLevelName:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        enum:
        - CACHE_AUTO
        - CACHE_CONNECTION
        - CACHE_CONSUMER
        - CACHE_NONE
        - CACHE_SESSION
        deprecated: false
        secret: false
        defaultValue: CACHE_AUTO
        description: 'Sets the cache level by name for the underlying JMS resources. Possible
          values are: CACHE_AUTO CACHE_CONNECTION CACHE_CONSUMER CACHE_NONE and CACHE_SESSION.
          The default setting is CACHE_AUTO. See the Spring documentation and Transactions
          Cache Levels for more information.'
        order: 12
      concurrentConsumers:
        kind: parameter
        group: consumer
        label: consumer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1"
        description: Specifies the default number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToConcurrentConsumers is used to control number of concurrent consumers on the reply message listener.
        order: 13
      maxConcurrentConsumers:
        kind: parameter
        group: consumer
        label: consumer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Specifies the maximum number of concurrent consumers when consuming from JMS (not for request/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up/down of threads. When doing request/reply over JMS then the option replyToMaxConcurrentConsumers is used to control number of concurrent consumers on the reply message listener.
        order: 14
      replyTo:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Provides an explicit ReplyTo destination which overrides any incoming value of Message.getJMSReplyTo().
        order: 15
      replyToDeliveryPersistent:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Specifies whether to use persistent delivery by default for replies.
        order: 16
      selector:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the JMS selector to use
        order: 17
      acceptMessagesWhileStopping:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies whether the consumer accept messages while it is stopping. You may consider enabling this option if you start and stop JMS routes at runtime while there are still messages enqued on the queue. If this option is false and you stop the JMS route then messages may be rejected and the JMS broker would have to attempt redeliveries which yet again may be rejected and eventually the message may be moved at a dead letter queue on the JMS broker. To avoid this its recommended to enable this option.
        order: 18
      allowReplyManagerQuickStop:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether the DefaultMessageListenerContainer used in the reply managers for request-reply messaging allow the DefaultMessageListenerContainer.runningAllowed flag to quick stop in case JmsConfigurationisAcceptMessagesWhileStopping is enabled and org.apache.camel.CamelContext is currently being stopped. This quick stop ability is enabled by default in the regular JMS consumers but to enable for reply managers you must enable this flag.
        order: 19
      consumerType:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.component.jms.ConsumerType
        enum:
        - Simple
        - Default
        - Custom
        deprecated: false
        secret: false
        defaultValue: Default
        description: 'The consumer type to use which can be one of: Simple Default or
          Custom. The consumer type determines which Spring JMS listener to use. Default
          will use org.springframework.jms.listener.DefaultMessageListenerContainer Simple
          will use org.springframework.jms.listener.SimpleMessageListenerContainer. When
          Custom is specified the MessageListenerContainerFactory defined by the messageListenerContainerFactory
          option will determine what org.springframework.jms.listener.AbstractMessageListenerContainer
          to use.'
        order: 20
      defaultTaskExecutorType:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.component.jms.DefaultTaskExecutorType
        enum:
        - ThreadPool
        - SimpleAsync
        deprecated: false
        secret: false
        description: 'Specifies what default TaskExecutor type to use in the DefaultMessageListenerContainer
          for both consumer endpoints and the ReplyTo consumer of producer endpoints.
          Possible values: SimpleAsync (uses Spring''s SimpleAsyncTaskExecutor) or ThreadPool
          (uses Spring''s ThreadPoolTaskExecutor with optimal values - cached threadpool-like).
          If not set it defaults to the previous behaviour which uses a cached thread
          pool for consumer endpoints and SimpleAsync for reply consumers. The use of
          ThreadPool is recommended to reduce thread trash in elastic configurations with
          dynamically increasing and decreasing concurrent consumers.'
        order: 21
      eagerLoadingOfProperties:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Enables eager loading of JMS properties as soon as a message is loaded which generally is inefficient as the JMS properties may not be required but sometimes can catch early any issues with the underlying JMS provider and the use of JMS properties
        order: 22
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 23
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 24
      exposeListenerSession:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies whether the listener session should be exposed when consuming messages.
        order: 25
      replyToSameDestinationAllowed:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether a JMS consumer is allowed to send a reply message to the same destination that the consumer is using to consume from. This prevents an endless loop by consuming and sending back the same message to itself.
        order: 26
      deliveryMode:
        kind: parameter
        group: producer
        label: producer
        type: string
        javaType: java.lang.Integer
        enum:
        - "1"
        - "2"
        deprecated: false
        secret: false
        description: Specifies the delivery mode to be used. Possibles values are those defined by javax.jms.DeliveryMode. NON_PERSISTENT = 1 and PERSISTENT = 2.
        order: 27
      deliveryPersistent:
        kind: parameter
        group: producer
        label: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Specifies whether persistent delivery is used by default.
        order: 28
      explicitQosEnabled:
        kind: parameter
        group: producer
        label: producer
        type: boolean
        javaType: java.lang.Boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Set if the deliveryMode priority or timeToLive qualities of service should be used when sending messages. This option is based on Spring's JmsTemplate. The deliveryMode priority and timeToLive options are applied to the current endpoint. This contrasts with the preserveMessageQos option which operates at message granularity reading QoS properties exclusively from the Camel In message headers.
        order: 29
      preserveMessageQos:
        kind: parameter
        group: producer
        label: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Set to true if you want to send message using the QoS settings specified on the message instead of the QoS settings on the JMS endpoint. The following three headers are considered JMSPriority JMSDeliveryMode and JMSExpiration. You can provide all or only some of them. If not provided Camel will fall back to use the values from the endpoint instead. So when using this option the headers override the values from the endpoint. The explicitQosEnabled option by contrast will only use options set on the endpoint and not values from the message header.
        order: 30
      priority:
        kind: parameter
        group: producer
        label: producer
        type: string
        javaType: int
        enum:
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
        - "7"
        - "8"
        - "9"
        deprecated: false
        secret: false
        defaultValue: "4"
        description: Values greater than 1 specify the message priority when sending (where 0 is the lowest priority and 9 is the highest). The explicitQosEnabled option must also be enabled in order for this option to have any effect.
        order: 31
      replyToConcurrentConsumers:
        kind: parameter
        group: producer
        label: producer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1"
        description: Specifies the default number of concurrent consumers when doing request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.
        order: 32
      replyToMaxConcurrentConsumers:
        kind: parameter
        group: producer
        label: producer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Specifies the maximum number of concurrent consumers when using request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.
        order: 33
      replyToOnTimeoutMaxConcurrentConsumers:
        kind: parameter
        group: producer
        label: producer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1"
        description: Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request/reply over JMS.
        order: 34
      replyToOverride:
        kind: parameter
        group: producer
        label: producer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Provides an explicit ReplyTo destination in the JMS message which overrides the setting of replyTo. It is useful if you want to forward the message to a remote Queue and receive the reply message from the ReplyTo destination.
        order: 35
      replyToType:
        kind: parameter
        group: producer
        label: producer
        type: string
        javaType: org.apache.camel.component.jms.ReplyToType
        enum:
        - Temporary
        - Shared
        - Exclusive
        deprecated: false
        secret: false
        description: 'Allows for explicitly specifying which kind of strategy to use for
          replyTo queues when doing request/reply over JMS. Possible values are: Temporary
          Shared or Exclusive. By default Camel will use temporary queues. However if
          replyTo has been configured then Shared is used by default. This option allows
          you to use exclusive queues instead of shared ones. See Camel JMS documentation
          for more details and especially the notes about the implications if running
          in a clustered environment and the fact that Shared reply queues has lower performance
          than its alternatives Temporary and Exclusive.'
        order: 36
      requestTimeout:
        kind: parameter
        group: producer
        label: producer
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "20000"
        description: The timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds). The default is 20 seconds. You can include the header CamelJmsRequestTimeout to override this endpoint configured timeout value and thus have per message individual timeout values. See also the requestTimeoutCheckerInterval option.
        order: 37
      timeToLive:
        kind: parameter
        group: producer
        label: producer
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: -1
        description: When sending messages specifies the time-to-live of the message (in milliseconds).
        order: 38
      allowNullBody:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether to allow sending messages with no body. If this option is false and the message body is null then an JMSException is thrown.
        order: 39
      alwaysCopyMessage:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If true Camel will always make a JMS message copy of the message when it is passed to the producer for sending. Copying the message is needed in some situations such as when a replyToDestinationSelectorName is set (incidentally Camel will set the alwaysCopyMessage option to true if a replyToDestinationSelectorName is set)
        order: 40
      disableTimeToLive:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Use this option to force disabling time to live. For example when you do request/reply over JMS then Camel will by default use the requestTimeout value as time to live on the message being sent. The problem is that the sender and receiver systems have to have their clocks synchronized so they are in sync. This is not always so easy to archive. So you can use disableTimeToLive=true to not set a time to live value on the sent message. Then the message will not expire on the receiver system. See below in section About time to live for more details.
        order: 41
      forceSendOriginalMessage:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: When using mapJmsMessage=false Camel will create a new JMS message to send to a new JMS destination if you touch the headers (get or set) during the route. Set this option to true to force Camel to send the original JMS message that was received.
        order: 42
      includeSentJMSMessageID:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Only applicable when sending to JMS destination using InOnly (eg fire and forget). Enabling this option will enrich the Camel Exchange with the actual JMSMessageID that was used by the JMS client when the message was sent to the JMS destination.
        order: 43
      replyToCacheLevelName:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: 'Sets the cache level by name for the reply consumer when doing request/reply
          over JMS. This option only applies when using fixed reply queues (not temporary).
          Camel will by default use: CACHE_CONSUMER for exclusive or shared w/ replyToSelectorName.
          And CACHE_SESSION for shared without replyToSelectorName. Some JMS brokers such
          as IBM WebSphere may require to set the replyToCacheLevelName=CACHE_NONE to
          work. Note: If using temporary queues then CACHE_NONE is not allowed and you
          must use a higher value such as CACHE_CONSUMER or CACHE_SESSION.'
        order: 44
      replyToDestinationSelectorName:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the JMS Selector using the fixed name to be used so you can filter out your own replies from the others when using a shared queue (that is if you are not using a temporary reply queue).
        order: 45
      asyncStartListener:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether to startup the JmsConsumer message listener asynchronously when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker then it may block while retrying and/or failover. This will cause Camel to block while starting routes. By setting this option to true you will let routes startup while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used then beware that if the connection could not be established then an exception is logged at WARN level and the consumer will not be able to receive messages; You can then restart the route to retry.
        order: 46
      asyncStopListener:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether to stop the JmsConsumer message listener asynchronously when stopping a route.
        order: 47
      destinationResolver:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.springframework.jms.support.destination.DestinationResolver
        deprecated: false
        secret: false
        order: 48
      errorHandler:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.springframework.util.ErrorHandler
        deprecated: false
        secret: false
        description: Specifies a org.springframework.util.ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message. By default these exceptions will be logged at the WARN level if no errorHandler has been configured. You can configure logging level and whether stack traces should be logged using errorHandlerLoggingLevel and errorHandlerLogStackTrace options. This makes it much easier to configure than having to code a custom errorHandler.
        order: 49
      errorHandlerLoggingLevel:
        kind: parameter
        group: advanced
        label: advanced
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        deprecated: false
        secret: false
        defaultValue: WARN
        description: Allows to configure the default errorHandler logging level for logging uncaught exceptions.
        order: 50
      errorHandlerLogStackTrace:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Allows to control whether stacktraces should be logged or not by the default errorHandler.
        order: 51
      exceptionListener:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: javax.jms.ExceptionListener
        deprecated: false
        secret: false
        description: Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions.
        order: 52
      headerFilterStrategy:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.apache.camel.spi.HeaderFilterStrategy
        deprecated: false
        secret: false
        description: To use a custom HeaderFilterStrategy to filter header to and from Camel message.
        order: 53
      idleConsumerLimit:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1"
        description: Specify the limit for the number of consumers that are allowed to be idle at any given time.
        order: 54
      idleTaskExecutionLimit:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1"
        description: Specifies the limit for idle executions of a receive task not having received any message within its execution. If this limit is reached the task will shut down and leave receiving to other executing tasks (in the case of dynamic scheduling; see the maxConcurrentConsumers setting). There is additional doc available from Spring.
        order: 55
      includeAllJMSXProperties:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: 'Whether to include all JMSXxxx properties when mapping from JMS
          to Camel Message. Setting this to true will include properties such as JMSXAppID
          and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then
          this option does not apply.'
        order: 56
      jmsKeyFormatStrategy:
        kind: parameter
        group: advanced
        label: advanced
        type: string
        javaType: java.lang.String
        enum:
        - default
        - passthrough
        deprecated: false
        secret: false
        description: 'Pluggable strategy for encoding and decoding JMS keys so they can
          be compliant with the JMS specification. Camel provides two implementations
          out of the box: default and passthrough. The default strategy will safely marshal
          dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can
          be used for JMS brokers which do not care whether JMS header keys contain illegal
          characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy
          and refer to it using the notation.'
        order: 57
      mapJmsMessage:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Specifies whether Camel should auto map the received JMS message to a suited payload type such as javax.jms.TextMessage to a String etc.
        order: 58
      maxMessagesPerTask:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: -1
        description: The number of messages per task. -1 is unlimited. If you use a range for concurrent consumers (eg min max) then this option can be used to set a value to eg 100 to control how fast the consumers will shrink when less work is required.
        order: 59
      messageConverter:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.springframework.jms.support.converter.MessageConverter
        deprecated: false
        secret: false
        description: To use a custom Spring org.springframework.jms.support.converter.MessageConverter so you can be in control how to map to/from a javax.jms.Message.
        order: 60
      messageCreatedStrategy:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.apache.camel.component.jms.MessageCreatedStrategy
        deprecated: false
        secret: false
        description: To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message.
        order: 61
      messageIdEnabled:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: When sending specifies whether message IDs should be added. This is just an hint to the JMS broker.If the JMS provider accepts this hint these messages must have the message ID set to null; if the provider ignores the hint the message ID must be set to its normal unique value
        order: 62
      messageListenerContainerFactory:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.apache.camel.component.jms.MessageListenerContainerFactory
        deprecated: false
        secret: false
        description: Registry ID of the MessageListenerContainerFactory used to determine what org.springframework.jms.listener.AbstractMessageListenerContainer to use to consume messages. Setting this will automatically set consumerType to Custom.
        order: 63
      messageTimestampEnabled:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Specifies whether timestamps should be enabled by default on sending messages. This is just an hint to the JMS broker.If the JMS provider accepts this hint these messages must have the timestamp set to zero; if the provider ignores the hint the timestamp must be set to its normal value
        order: 64
      pubSubNoLocal:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies whether to inhibit the delivery of messages published by its own connection.
        order: 65
      receiveTimeout:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: The timeout for receiving messages (in milliseconds).
        order: 66
      recoveryInterval:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "5000"
        description: Specifies the interval between recovery attempts i.e. when a connection is being refreshed in milliseconds. The default is 5000 ms that is 5 seconds.
        order: 67
      requestTimeoutCheckerInterval:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: Configures how often Camel should check for timed out Exchanges when doing request/reply over JMS. By default Camel checks once per second. But if you must react faster when a timeout occurs then you can lower this interval to check more frequently. The timeout is determined by the option requestTimeout.
        order: 68
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 69
      transferException:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side then the caused Exception will be send back in response as a javax.jms.ObjectMessage. If the client is Camel the returned Exception is rethrown. This allows you to use Camel JMS as a bridge in your routing - for example using persistent queues to enable robust routing. Notice that if you also have transferExchange enabled this option takes precedence. The caught exception is required to be serializable. The original Exception on the consumer side can be wrapped in an outer exception such as org.apache.camel.RuntimeCamelException when returned to the producer.
        order: 70
      transferExchange:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: 'You can transfer the exchange over the wire instead of just the
          body and headers. The following fields are transferred: In body Out body Fault
          body In headers Out headers Fault headers exchange properties exchange exception.
          This requires that the objects are serializable. Camel will exclude any non-serializable
          objects and log it at WARN level. You must enable this option on both the producer
          and consumer side so Camel knows the payloads is an Exchange and not a regular
          payload.'
        order: 71
      transferFault:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If enabled and you are using Request Reply messaging (InOut) and an Exchange failed with a SOAP fault (not exception) on the consumer side then the fault flag on MessageisFault() will be send back in the response as a JMS header with the key org.apache.camel.component.jms.JmsConstantsJMS_TRANSFER_FAULTJMS_TRANSFER_FAULT. If the client is Camel the returned fault flag will be set on the link org.apache.camel.MessagesetFault(boolean). You may want to enable this when using Camel components that support faults such as SOAP based such as cxf or spring-ws.
        order: 72
      useMessageIDAsCorrelationID:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages.
        order: 73
      waitForProvisionCorrelationToBeUpdatedCounter:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "50"
        description: Number of times to wait for provisional correlation id to be updated to the actual correlation id when doing request/reply over JMS and when the option useMessageIDAsCorrelationID is enabled.
        order: 74
      waitForProvisionCorrelationToBeUpdatedThreadSleepingTime:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "100"
        description: Interval in millis to sleep each time while waiting for provisional correlation id to be updated.
        order: 75
      port:
        kind: parameter
        group: port
        label: port
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "61616"
        order: 76
      password:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: true
        description: Password to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory.
        order: 77
      username:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: true
        description: Username to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory.
        order: 78
      serviceName:
        kind: parameter
        group: serviceName
        label: serviceName
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        defaultValue: activemq
        order: 79
      transacted:
        kind: parameter
        group: transaction
        label: transaction
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies whether to use transacted mode
        order: 80
      lazyCreateTransactionManager:
        kind: parameter
        group: transaction (advanced)
        label: transaction,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: If true Camel will create a JmsTransactionManager if there is no transactionManager injected when option transacted=true.
        order: 81
      transactionManager:
        kind: parameter
        group: transaction (advanced)
        label: transaction,advanced
        type: object
        javaType: org.springframework.transaction.PlatformTransactionManager
        deprecated: false
        secret: false
        description: The Spring transaction manager to use.
        order: 82
      transactionName:
        kind: parameter
        group: transaction (advanced)
        label: transaction,advanced
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The name of the transaction to use.
        order: 83
      transactionTimeout:
        kind: parameter
        group: transaction (advanced)
        label: transaction,advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: -1
        description: The timeout value of the transaction (in seconds) if using transacted mode.
        order: 84
