#!/bin/bash

# All modules, in the right build order
ALL_MODULES="core extension integration connectors verifier rest s2i ui tests"
POD_MODULES="verifier rest ui"
MODULES=(
  "ui"
  "core"
  "extension:core"
  "integration:core extension"
  "connectors:core extension integration"
  "verifier:core extension integration connectors"
  "rest:core extension integration connectors"
  "s2i:core extension integration connectors rest"
  "tests:core extension integration connectors rest s2i"
)


call_maven() {
    local args=$1
    local maven_modules=$(extract_modules)
    check_error $maven_modules
    cd $(appdir)
    if [ -z "${maven_modules}" ]; then
        echo "=============================================================================="
        echo "./mvnw $args"
        echo "=============================================================================="
        ./mvnw $args
        if [ $(hasflag --kill-pods --kill-pod -k) ]; then
          kill_pods $POD_MODULES
        fi
    else
      echo "Modules: $maven_modules"
      echo "=============================================================================="
      echo "./mvnw -N --batch-mode install -Pflash ### Installing parent pom.xml"
      ./mvnw -N --batch-mode install -Pflash
      for module in $maven_modules; do
        echo "=============================================================================="
        echo "./mvnw $args -f $module ### Processing module $module"
        echo "=============================================================================="
        ./mvnw -f $module $args
        if [ $(hasflag --kill-pods --kill-pod -k) ]; then
            kill_pods $module
        fi
      done
    fi
}

extract_modules() {
    local modules=""

    if [ "$(hasflag --backend -b)" ]; then
        modules="$modules core extension integration connectors rest verifier"
    fi

    if [ "$(hasflag --images)" ]; then
        modules="$modules ui rest verifier s2i"
    fi

    local arg_modules=$(readopt --module -m);
    if [ -n "${arg_modules}" ]; then
        modules="$modules ${arg_modules//,/ }"
    fi

    if [ "$(hasflag --dependencies -d)" ]; then
        local extra_modules=""
        for module in $modules; do
            for m in "${MODULES[@]}"; do
              local k=${m%%:*}
              if [ "$module" == $k ]; then
                  local v=${m#*:}
                  extra_modules="${extra_modules} $v"
              fi
            done
        done
        modules="$modules $extra_modules"
    fi
    if [ -z "$modules" ]; then
      return
    fi
    # Unique modules
    local unique_modules=$(echo $modules | xargs -n 1 | sort -u | xargs | awk '$1=$1')
    echo $(order_modules "$unique_modules")
}

order_modules() {
    # Fix order
    local modules="$1"
    # All modules in the proper order
    local ret=$ALL_MODULES
    for cm in "${MODULES[@]}"; do
      local check_module=${cm%%:*}
      # Check if $check_module is in the module list
      if [ -n "${modules##*${check_module}*}" ]; then
        # No, so remove it from the return value
        ret=${ret//$check_module/}
      fi
    done

    # Normalize return value
    echo $ret | awk '$1=$1'
}

kill_pods() {
    setup_oc

    for pod in $@; do
        if [ "${POD_MODULES/$pod/}" != "${POD_MODULES}" ]; then
            echo "Killing pods "$(oc get pod -o name | grep "syndesis-$pod")
            oc get pod -o name | grep "syndesis-$pod" | xargs oc delete
        fi
    done
}
