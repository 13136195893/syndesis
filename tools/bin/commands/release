#!/bin/bash

NEXUS_URL="https://oss.sonatype.org"
NEXUS_STAGING_PLUGIN_VERSION="1.6.8"
NEXUS_SERVER_ID="oss-sonatype-staging"
NEXUS_STAGING_REPO_PREFIX="iosyndesis" #This is the parent groupId with dots removed.
NEXUS_DEFAULT_STAGING_PROFILE_ID="61015c63f807ce" #This this is the id of the staging profile. Just go to the list of staging profiles, click the one u need and grab that id from the url (its not displayed in the actual list).

REPO_ANNOUNCEMENT_PREFIX="OpenedStagingProfile"

NO_TAG="notag"

release::description() {
    echo "Perform a release"
}

release::usage() {
    cat - <<EOT
-n  --dry-run                      Dry run. This will stage and drop a release
    --release-snapshots            Indicates that this is a snapshot release, so no versions will be updated
    --release-version <version>    Version to release (e.g. "1.2.1")
    --dev-version <version>        Next development version
    --profiles <p1,p2,..>          Profiles to use (default: "release")
    --settings-xml <settings.xml>  Path to a custom settings.xml to use for the reelase

    --sonatype-username <user>     Sonatype username
    --sonatype-password <password> Sonatype password

    --docker-registry <registry>   Docker registry
    --docker-server-id <server>    Docker server id (as defined in settings.xml)
    --docker-username <user>       Registry username
    --docker-email <email>         Registry user's email
    --docker-password <password>   Registry password


EOT
}

release::run() {
    source "$(basedir)/commands/util/maven_funcs"
    local dry_run=$(hasflag --dry-run -n)
    local release_snapshots=$(hasflag --release-snapshots)
    local release_version=$(readopt --release-version)
    local dev_version=$(readopt --dev-version)
    local maven_opts=""

    #Validation
    if [ -z "${release_snapshots}" ]; then
        if [ -z "${release_version}" ]; then
            echo "Please specify --release-version"
            exit 1
        fi

        if [ -z "${dev_version}" ]; then
            echo "Please specify --dev-version"
            exit 1
        fi
    fi


    local profiles=$(readopt --profiles)
    if [ -n "${profiles}" ]; then
        maven_opts="$maven_opts -P${profiles}"
    else
        maven_opts="-Prelease"
    fi

    local settings_xml=$(readopt --settings-xml)
    if [ -n "${settings_xml}" ]; then
        maven_opts="$maven_opts -s $settings_xml"
    fi

    echo "Creating new staging repository..."
    local repo_id=$(open_staging_repository "$maven_opts" $release_version)
    echo "Opened staging repository: $repo_id"

    #There is no tag yet, so let's pass $NO_TAG instead.
    trap "do_cleanup \"$repo_id\" \"$NO_TAG\" \"$maven_opts\"" EXIT

    local maven_args=""
    if [ -n "${release_snapshots}" ]; then
        maven_args="clean package deploy:deploy -DstagingRepositoryId=$repo_id $maven_opts"
    else
        maven_args="-B release:clean release:prepare release:perform -DstagingRepositoryId=$repo_id -DpushChanges=false -DreleaseVersion=${release_version} -DdevelopmentVersion=${dev_version} -Dtag=$release_version $maven_opts"
    fi
    call_maven "$maven_args"

    if [ -z "${release_snapshots}" ]; then
        # Update the trap with the tag created.
        local tag=$(find_tag)
        trap "do_cleanup \"$repo_id\" \"$tag\" \"$maven_opts\"" EXIT
    fi

    echo "Closing staging repository: $repo_id"
    close_staging_repository "$repo_id" "$maven_opts"

    if [ -n "$dry_run" ]; then
        echo "This is a dry run ..."
        echo "Dropping tag $tag"
        git tag -d $tag
        echo "Dropping staging repository: $repo_id"
        drop_staging_repository "$repo_id" "$maven_opts"
    else
        echo "Releasing staging repository: $repo_id"
        trap "echo Done!" EXIT
        exit
        release_staging_repository "$repo_id" "$maven_opts"
        git push origin master
        git push orign $tag
    fi
}

# ======================================================
# Staging / Release Helper Functions

open_staging_repository() {
    local maven_opts=$1
    local maven_args="org.sonatype.plugins:nexus-staging-maven-plugin:${NEXUS_STAGING_PLUGIN_VERSION}:rc-open -DnexusUrl=${NEXUS_URL} -DstagingDescriptions='Version $release_version' -DserverId=${NEXUS_SERVER_ID} -DstagingProfileId=${NEXUS_DEFAULT_STAGING_PROFILE_ID} -DopenedRepositoryMessageFormat='$REPO_ANNOUNCEMENT_PREFIX:%s' $maven_opts"
    #Call maven and just grab the last line that contains $REPO_ANNOUNCEMENT_PREFIX discard the line that displays the whole command and get the string that is between `:` and `'`.
    call_maven "$maven_args" | tee /tmp/x.log | grep -v maven | grep $REPO_ANNOUNCEMENT_PREFIX | tail -n 1 | awk -F ":" '{print $2}' | awk -F "'" '{print $1}'
}

close_staging_repository() {
    call_sonatype "rc-close" "$1" "$2"
}

release_staging_repository() {
    call_sonatype "rc-release" "$1" "$2"
}

drop_staging_repository() {
    call_sonatype "rc-drop" "$1" "$2"
}

call_sonatype() {
    local command=$1
    local repo_id=$2
    local maven_opts=$3
    local maven_args="org.sonatype.plugins:nexus-staging-maven-plugin:${NEXUS_STAGING_PLUGIN_VERSION}:${command} -DnexusUrl=${NEXUS_URL} -DserverId=${NEXUS_SERVER_ID} -DstagingRepositoryId=$repo_id $maven_opts"
    call_maven "$maven_args"
}

do_cleanup() {
    echo "Cleaning up ..."
    local repo_id=$1
    local tag=$2
    local maven_opts=$3
    if [ "$NO_TAG" == "$tag" ]; then
        echo "No tag has been specified. Skipping!"
    else
        echo "Droping tag $tag"
        git tag -d $tag || echo "Failed to drop tag: tag."
    fi
    echo "Droping staging repository: $repo_id"
    drop_staging_repository "$repo_id" "$maven_opts"
}

find_tag() {
    local release_version=$1
    git tag -l | grep $release_version | tail -n 1
}
