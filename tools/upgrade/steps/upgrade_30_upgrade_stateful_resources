#!/bin/bash

upgrade_stateful_resources::label() {
    echo "Upgrade stateful resources"
}

upgrade_stateful_resources::doc() {
  cat <<EOT
Now that the database has been migrated, the current infrastructure config maps might need to be upgraded, too.

This upgrade is similar to the DB migration, except that upgrade shell scripts are used for each version:

.Example ConfigMap upgrade

```
/resource/
    1.3/
      10-update-serverconfig.sh
      20-update-uiconfig.sh
    1.4/
      ...
```

Again, as for JsonDB upgrades, these scripts are specific for a _target_ version.
In general, these upgrades scripts are used to add default values for new features (if not present) or change defaults.
As input the get a pointer to a copy of the extracted <<step-backup-stateful-resources,configmap files>> which they should adopt in place.

NOTE: No resources from generated integration pods are upgraded. This needs to be done as part of the <<upgrade-integration,Integration Upgrade>> process.

Finally, the generated upgraded configmaps are applied with `oc replace` to the cluster, overwriting the existing configmaps.

.Rollback

A rollback replays all the original configmaps extracted in a previous <<step-backup-stateful-resources,configmap files>>

EOT
}
upgrade_stateful_resources::run() {
    local backupdir=$1
    local workdir=$2
    local tag=$3
    local migrationdir=$4

    if [ -z "${migrationdir}" ]; then
        echo "      - Skipping resource migration as no migration dir is provided"
        return
    fi

    local resourcedir=${migrationdir}/resource
    if [ ! -d ${resourcedir}/${tag} ]; then
        echo "      - No stateful resource migration scripts found for ${tag} in ${resourcedir}"
        return
    fi

    for script in $(ls ${resourcedir}/${tag}/*); do
      echo "      - Executing $tag/$(basename $script)"
      source ${script}
    done
}

upgrade_stateful_resources::rollback() {
    local backupdir=${1}
    local workdir=${2}
    local cleanup=${3:-}

    sleep 1
}
